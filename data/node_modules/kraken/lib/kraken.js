/*!
* Kraken
* Copyright(c) 2012 Przemek Matylla <przemek@matylla.pl>
* MIT Licensed
*/

/**
* Module dependencies.
*/

var https = require('https'),
    fs    = require('fs');


/**
* Constructor
*/

var Kraken = module.exports = function(opts) {
  this.auth = {
    user: opts.user || '',
    pass: opts.pass || '',
    apikey: opts.apikey || ''
  };
};


/**
* Pass the given `image` URL along with credentials to Kraken API via HTTPS POST.
*
* @param {String} image
* @param {Function} cb
* @api public
*/

Kraken.prototype.optimize = function(image, cb) {
  var postData = JSON.stringify({
    'auth': this.auth,
    'image': image
  });

  var options = {
    host: 'api.kraken.io',
    path: '/',
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Content-Length': postData.length
    }
  };

  var request = https.request(options, function(res) {
    res.setEncoding('utf8');

    res.on('data', function(data) {
      cb(JSON.parse(data));
    });
  });

  request.write(postData);
  request.end();
};


/**
* Upload the given `file` along with credentials to Kraken API via HTTPS POST.
*
* @param {String} file
* @param {Function} cb
* @api public
*/

Kraken.prototype.upload = function(file, cb) {
  var boundary = (Math.floor(Math.random() * 1000) + 9000).toString(16);

  var encodeAuth = function(boundary, auth) {
    var authField = '--' + boundary + '\r\n';
    authField += 'Content-Disposition: form-data; name="auth"\r\n\r\n' + auth + '\r\n';

    return authField;
  };

  var encodeFile = function(boundary, name) {
    var fileField = '--' + boundary + '\r\n';
    fileField += 'Content-Type: application/octet-stream\r\n';
    fileField += 'Content-Disposition: form-data; name="' + name + '"; filename="' + name + '"\r\n';
    fileField += 'Content-Transfer-Encoding: binary\r\n\r\n';

    return fileField;
  };

  var authField = encodeAuth(boundary, JSON.stringify(this.auth)),
      fileField = encodeFile(boundary, file.substring(file.lastIndexOf('/')+1)),
      endString = '\r\n--' + boundary + '--';

  fs.readFile(file, function(err, fileData) {
    if (!err) {
      var options = {
        host: 'api.kraken.io',
        path: '/file',
        method: 'POST',
        headers: {
          'Content-Length': authField.length + fileField.length + endString.length + fileData.length,
          'Content-Type': 'multipart/form-data; boundary="' + boundary + '"'
        }
      };

      var req = https.request(options, function(res) {
        res.setEncoding('utf8');

        res.on('data', function(data) {
          cb(JSON.parse(data));
        });
      });

      req.write(authField);
      req.write(fileField);
      req.write(fileData);
      req.end(endString);
    } else {
      cb({
        'success': false,
        'error': 'File `' + file + '` does not exists. Please check you file path.'
      });
    }
  });
};